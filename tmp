Шаги для выполнения проекта:
1) Посмотреть на макет
2) Продумать состав данных
3) Описать эти данные в виде типов
4) Протипизировать
5) Реализовать model
6) Реализовать view
7) Соеденить model и view

Данные:
1) Категория товара
2) Название товара
3) Изображение товара
4) Цена товара
5) Описание товара
6) Способ оплаты
7) Адрес доставки
8) Email
9) Телефон

Объекты:
1) товар
Действий нет
2) Данные пользователя
Действия:
а) задать способ оплаты
б) Задать адрес
в) задать email
г) задать телефон
д) Очистить данные

Коллекции:
1) Каталог товаров
Действия:
а) Заполнить Каталог
б) Получить каталог
2) Корзина с товарами
Действия:
а) Добавить товар в корзину
б) Убрать товар из корзины
в) Очистить корзину
г) Получить список

Компоненты:
1) Карточка товара
Данные:
а) Категория товара
б) Имя товара
в) Изображение товара
г) Цена товара
д) Описание товара
2) Форма
Данные:
а) Способ оплаты
б) Адрес доставки
в) Email
г) Телефон

Экраны:
1) Главная страница
Компоненты:
а) Карточка товара
Модель:
а) Модель товара
2) Модальное окно товара
Компоненты%
а) Карточка товара
Модель:
а) Модель товара
3) Модальное окно корзины
Компоненты:
а) Карточка товара
Модель:
а) Модель товара
4) Модальное окно с формой оплаты
Компоненты:
а) Форма
Модель:
а) Данные покупателя
5) Модальное окно с формой контактов
Компоненты:
а) Форма
Модель:
а) Данные покупателя
6) Модальное окно успешной покупки


Что происходит:
1. Делаем get запрос на получение списка ProductItem объектов на сервер, используя класс-модель ShopApi. Полученные данные передаём в
класс-модель ProductCatalog и сохраняем этот массив объектов там через setItems(). Через EventEmitter генерируется событие catalog:items-changed

2. Для рендера используем класс-отображение Card и затем через replaceChildren парентим всё это дело в каталог (через Page или CatalogProduct).
Контект: информация о товаре (категория, имя, картинка, цена)

3. На этом этапе у нас должны быть отрисованы карточки на главной странице.

4. При клике на карточку рендерится модальное окно, которое реализовано классом-отображением Modal. Контент: информация о товаре
(категория, имя, описание, картинка, кнопка купить, цена)

5. Модальное окно можно закрыть либо нажать кнопку купить.

6. При клике на кнопку купить в модальном окне товар добавляется в корзину, используя класс-модель Basket. Также через EventEmitter генерируется
событие basket:items-changed
У этого класса должно быть 2 метода:  add(при клике на кнопку купить) и remove (при клике на корзину).

6. При нажатии на иконку корзины в хедере открывается модальная окно (класс Modal) с корзиной

7. Используем класс-отображение BasketItemView для рендера карточки товара внутри корзины по событию basket:items-changed

8. Используем класс-отображение BasketView и парентим карточки корзины под корзину

9. В корзине можно удалить товары, используя класс-модель Bakset и через события отрисовать изменения.

10. При нажатии на кнопку "оформить" контент модального окна меняется на форму данных доставки(способ оплаты, адрес доставки).

11. Кнопка доступна если выбран способ оплаты и заполнен адрес.

13. При клике на кнопку далее используется класс-модель Order(или Customer) и через сетеры устанавливается адрес и способ оплаты

14. Контент модального окна меняется на форму с контактами.

15. Кнопка доступна при заполнении полей email и телефон

16. Контент модального окна меняется на окно успеха.



