1. Первичная загрузка страницы
а) Используем класс ShopApi, чтобы загрузить список товаров с сервера. Полученные данные передаём в
класс-модель ProductCatalog и сохраняем этот массив объектов там через setItems().
Через EventEmitter генерируется событие catalog:items-changed

б) По событию catalog:items-changed отрисовываем карточки, используя класс-отображение CardView и парентим его под контейнер класс-
отображение ProductCatalogView. Используем для этого метод render.

2. Клик по карточке
а) Рендерим модальное окно.
б) Устанавлием контент модального окна через клонирование темплейта и парентим его под модальное окно
б) Контент модального окна: информация о товаре.
г) Модальное окно можно закрыть или нажать на кнопку "в корзину".
д) При нажатии на кнопку "в корзину" товар добавляется в корзину. Здесь используется класс-модель basket и его метод add.
е) Генерируется событие basket:items-changed
ж) По этому событию рендерится BasketItemView и парентиться под BasketView

3. Открытие корзины
а) По нажатию на иконку корзины открывается модальное окно.
б) Устанавливаетс контент: корзина
г) В корзине есть кнопка удалить, удаление совершается, используя класс-модель Basket и метод remove.
Генерируется событие basket:items-changed
д) По событию перерендеривается корзина, используется BasketView
е)Кнопка "оформить" недоступна, если в корзине нет товаров
ж) По нажатию кнопки "оформить" контент модального окна меняется на форму доставки

4. Заполнение формы доставки
а) Кнопка "далее" недоступна , если не заполнено поле "адрес" и не выбран способ оплаты
б) По нажатию "далее" через класс-модель Order устанавливаются значения address и paymentMethod
в) По нажатию "далее" контент модального окна меняется на форму контактов

5. Заполнение формы контактов
а) Кнопка "далее" недоступна , если не заполнено поле "email" и "телефон"
б) По нажатию "далее" через класс-модель Order устанавливаются значения email и phoneNumber

6. Успешная покупка
а) Отправляем post запрос на сервер с данными из Order
